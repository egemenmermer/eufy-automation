// Mock Email Service for testing without real credentials
const moment = require('moment');
const logger = require('../../src/utils/logger');

class MockEmailService {
  constructor() {
    this.transporter = null;
    this.sentEmails = []; // Store sent emails for testing verification
  }

  async initialize() {
    try {
      logger.email('üß™ Initializing Mock Email Service (TEST MODE)...');
      
      // Simulate initialization delay
      await new Promise(resolve => setTimeout(resolve, 300));
      
      this.transporter = { mock: true };
      
      logger.email('‚úÖ Mock Email service initialized successfully');
      return true;
    } catch (error) {
      logger.error('‚ùå Failed to initialize Mock Email service', { error: error.message });
      throw error;
    }
  }

  async sendAccessConfirmation(event) {
    try {
      if (!event.attendeeEmail) {
        throw new Error('No attendee email found for event');
      }

      const emailData = {
        to: event.attendeeEmail,
        subject: `Access Confirmed - ${event.title}`,
        html: this.generateAccessConfirmationHTML(event),
        text: this.generateAccessConfirmationText(event),
        timestamp: new Date().toISOString(),
        mockMode: true
      };

      // Store the email for verification
      this.sentEmails.push(emailData);
      
      // Simulate email sending delay
      await new Promise(resolve => setTimeout(resolve, 200));
      
      logger.email('‚úÖ Mock: Access confirmation sent', {
        to: event.attendeeEmail,
        eventTitle: event.title,
        eventTime: event.startTime,
        mockMode: true
      });

      return true;
    } catch (error) {
      logger.error('‚ùå Mock: Failed to send access confirmation', { 
        error: error.message,
        eventId: event.id,
        attendeeEmail: event.attendeeEmail
      });
      throw error;
    }
  }

  generateAccessConfirmationHTML(event) {
    const startTime = moment(event.startTime).format('MMMM Do YYYY, h:mm A');
    const endTime = moment(event.endTime).format('h:mm A');
    
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Access Confirmation - TEST MODE</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 5px; }
            .content { background-color: #f9f9f9; padding: 20px; margin: 20px 0; border-radius: 5px; }
            .test-banner { background-color: #ff9800; color: white; padding: 10px; text-align: center; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="test-banner">üß™ TEST MODE - Mock Email</div>
        <div class="header">
            <h1>üîì Access Confirmed</h1>
            <p>Your scheduled access has been automatically granted</p>
        </div>
        
        <div class="content">
            <h2>Booking Details</h2>
            <p><strong>Event:</strong> ${event.title}</p>
            <p><strong>Date & Time:</strong> ${startTime} - ${endTime}</p>
            ${event.location ? `<p><strong>Location:</strong> ${event.location}</p>` : ''}
            ${event.description ? `<p><strong>Notes:</strong> ${event.description}</p>` : ''}
            
            <p><em>This is a test email generated by the mock email service.</em></p>
        </div>
    </body>
    </html>
    `;
  }

  generateAccessConfirmationText(event) {
    const startTime = moment(event.startTime).format('MMMM Do YYYY, h:mm A');
    const endTime = moment(event.endTime).format('h:mm A');
    
    return `
üß™ TEST MODE - MOCK EMAIL

ACCESS CONFIRMED - ${event.title}

Your scheduled access has been automatically granted.

BOOKING DETAILS:
- Event: ${event.title}
- Date & Time: ${startTime} - ${endTime}
${event.location ? `- Location: ${event.location}` : ''}
${event.description ? `- Notes: ${event.description}` : ''}

This is a test email generated by the mock email service.
Generated at ${moment().format('YYYY-MM-DD HH:mm:ss')}
    `.trim();
  }

  async sendErrorNotification(error, context = {}) {
    try {
      const emailData = {
        to: 'admin@test.com', // Mock admin email
        subject: `üö® Mock System Error - ${moment().format('YYYY-MM-DD HH:mm')}`,
        text: `Mock Error Notification:\n${error.message}\nContext: ${JSON.stringify(context)}`,
        timestamp: new Date().toISOString(),
        mockMode: true
      };

      this.sentEmails.push(emailData);
      
      logger.email('‚úÖ Mock: Error notification sent to admin', {
        error: error.message,
        context,
        mockMode: true
      });

      return true;
    } catch (emailError) {
      logger.error('‚ùå Mock: Failed to send error notification', { 
        originalError: error.message,
        emailError: emailError.message,
        context
      });
    }
  }

  // Test helper methods
  getSentEmails() {
    return this.sentEmails;
  }

  getLastSentEmail() {
    return this.sentEmails[this.sentEmails.length - 1] || null;
  }

  clearSentEmails() {
    this.sentEmails = [];
    logger.email('üß™ Mock: Cleared sent emails cache');
  }

  // Get email statistics for testing
  getEmailStats() {
    return {
      totalSent: this.sentEmails.length,
      confirmationEmails: this.sentEmails.filter(e => e.subject.includes('Access Confirmed')).length,
      errorEmails: this.sentEmails.filter(e => e.subject.includes('System Error')).length,
      mockMode: true
    };
  }
}

module.exports = MockEmailService; 